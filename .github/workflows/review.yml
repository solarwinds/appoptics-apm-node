name: Review - Full Test Suite (on pull)

on: 
  pull_request: 

  workflow_dispatch:
    inputs: 
      node:
        required: false
        description: 'A node version (e.g 10.16.0)'
        default: '16'

jobs:
 full-tests:
    name: Full Tests
    runs-on: ubuntu-latest

    # Docker Hub image that `container-job` executes (our runner)
    container: 
      image: ghcr.io/${{ github.repository }}/node-agent-runner:latest
      env:
        # tests run against a "local" udp "collector"
        SW_APM_LOG_SETTINGS: error,warn,patching,bind,debug
        SW_APM_COLLECTOR: localhost:7832
        SW_APM_REPORTER: udp
        SW_APM_SERVICE_KEY: ${{ secrets.SW_APM_SERVICE_KEY }}
        SW_APM_TEST_SERVICE_KEY: ${{ secrets.SW_APM_TEST_SERVICE_KEY }}
        SW_APM_TEST_COLLECTOR: ${{ secrets.SW_APM_TEST_COLLECTOR }}
        SW_APM_TEST_CASSANDRA_2_2: cassandra:9042
        SW_APM_TEST_MEMCACHED_1_4: memcached:11211
        SW_APM_TEST_MONGODB_2_4: mongo_2_4:27017
        SW_APM_TEST_MONGODB_2_6: mongo_2_6:27017
        SW_APM_TEST_MONGODB_3_0: mongo_3_0:27017
        SW_APM_TEST_SQLSERVER_EX: mssql:1433
        SW_APM_TEST_MYSQL: mysql:3306
        SW_APM_TEST_ORACLE: oracle:1521
        SW_APM_TEST_POSTGRES: postgres:5432
        SW_APM_TEST_RABBITMQ_3_5: rabbitmq:5672
        SW_APM_TEST_REDIS_3_0: redis:6379

    # Service containers to run with runner-job`
    services:
      cassandra:
        image: cassandra:2 
        options: >-
          --health-cmd "nodetool ring"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - "9042:9042"
      memcached:
        image: memcached
        options: >-
          --health-cmd "timeout 5 bash -c 'cat < /dev/null > /dev/udp/127.0.0.1/11211'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - "11211:11211"
      mongo_2_4:
        image: mongo:2.4
        options: >-
          --health-cmd "mongo --quiet --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # host:container
          - "27016:27017"
      mongo_2_6:
        image: mongo:2.6
        options: >-
          --health-cmd "mongo --quiet --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - "27017:27017"
      mongo_3_0:
        image: mongo:3 
        options: >-
          --health-cmd "mongo --quiet --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # host:container
          - "27018:27017"
      mssql:
        image: "mcr.microsoft.com/mssql/server:2017-CU8-ubuntu"
        options: >-
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -U sa -P $SA_PASSWORD -Q 'select 1' -b -o /dev/null"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - "1433:1433"
        env:
          ACCEPT_EULA: true
          SA_PASSWORD: MeetSQL2017requirements!
      mysql:
        image: "mysql:5.7.13"
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          MYSQL_ROOT_PASSWORD: admin
        ports:
          - "3306:3306"
      oracle:
        image: "traceqa/oracle-express" # traceqa is a SolarWinds account
        ports:
          - "1521:1521"
      postgres:
        image: "postgres"
        options: >-
          --health-cmd "pg_isready"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - "5432:5432"
        env:
          # sets password to this so make pg.test.js agree
          POSTGRES_PASSWORD: xyzzy
      rabbitmq:
        image: rabbitmq:3-management 
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - "5672:5672"
          - "5671:5671"
      redis:
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout ${{ github.ref }}
        uses: actions/checkout@v2

      - name: Setup Node ${{ github.event.inputs.node || '16' }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ github.event.inputs.node || '16' }}

      - name: Show Environment Info
        run: |
          printenv
          node --version
          npm --version 
          cat /etc/os-release

      - name: NPM Install
        run: npm install  --unsafe-perm

      - name: Run Full Test Suite
        run: npm test
